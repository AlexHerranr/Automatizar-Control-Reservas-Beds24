function actualizarCalendario() {
  // Mensaje de inicio para verificar que la función se está ejecutando
  SpreadsheetApp.getActiveSpreadsheet().toast('Iniciando actualización del calendario...', 'Inicio', 10);

  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheetReservas = ss.getSheetByName('RESERVAS');
  const sheetCalendario = ss.getSheetByName('CALENDARIO');

  // Obtener el rango completo que deseas limpiar (B3:FP11)
  const rangeToClear = sheetCalendario.getRange('B3:FP11');

  // Descombinar todas las celdas combinadas en el rango y limpiar el contenido
  const mergedRanges = rangeToClear.getMergedRanges();
  if (mergedRanges.length > 0) {
    mergedRanges.forEach(range => range.breakApart());
  }
  rangeToClear.clearContent();

  // Definir el número de filas y columnas que vamos a manejar
  const numRows = 9;
  const numCols = sheetCalendario.getLastColumn() - 1;

  // Obtener todos los datos necesarios
  const reservas = sheetReservas.getRange(2, 1, sheetReservas.getLastRow() - 1, sheetReservas.getLastColumn()).getValues();
  const headers = sheetCalendario.getRange(1, 2, 1, numCols).getValues()[0];
  const calendarData = sheetCalendario.getRange(3, 1, numRows, 1).getValues();

  // Crear un mapa de roomId a índices de fila
  const roomIdMap = {};
  for (let i = 0; i < calendarData.length; i++) {
    const roomId = calendarData[i][0];
    if (roomId !== undefined && roomId !== null) {
      roomIdMap[roomId] = i;
    }
  }

  // Crear un mapa de fecha a índice de columna
  const dateColMap = {};
  for (let col = 0; col < headers.length; col++) {
    const headerDate = new Date(headers[col]);
    headerDate.setHours(0, 0, 0, 0);
    dateColMap[headerDate.getTime()] = col;
  }

  // Crear una matriz para representar el calendario
  const calendarMatrix = Array.from({ length: numRows }, () => Array(numCols).fill(''));

  // Crear una matriz para las fusiones (merge) de celdas
  const mergeRanges = [];

  reservas.forEach(reserva => {
    const roomId = reserva[1];
    const status = reserva[2];
    const firstNightStr = reserva[3];
    const lastNightStr = reserva[4];
    const guestFull = reserva[7];
    const refererEditable = reserva[19];

    // Filtrar solo las reservas con estado "Confirmada" o "Nueva"
    if (status !== "Confirmada" && status !== "Nueva") return;

    const firstNightDate = new Date(firstNightStr);
    const lastNightDate = new Date(lastNightStr);
    firstNightDate.setHours(0, 0, 0, 0);
    lastNightDate.setHours(0, 0, 0, 0);

    const firstNight = firstNightDate.getTime();
    const lastNight = lastNightDate.getTime();
    const guestInfo = `${guestFull} ${status} ${refererEditable}`;
    const rowIndex = roomIdMap[roomId];

    if (rowIndex !== undefined) {
      let startColIndex = dateColMap[firstNight];
      let endColIndex = dateColMap[lastNight];

      if (startColIndex !== undefined && endColIndex !== undefined && startColIndex <= endColIndex) {
        // Llenar la matriz con el guestInfo
        for (let col = startColIndex; col <= endColIndex; col++) {
          calendarMatrix[rowIndex][col] = guestInfo;
        }
        // Añadir el rango a la lista de fusiones
        mergeRanges.push({
          row: rowIndex + 3,
          startCol: startColIndex + 2,
          endCol: endColIndex + 2
        });
      }
    }
  });

  // Escribir los datos en la hoja de cálculo de una sola vez
  const writeRange = sheetCalendario.getRange(3, 2, numRows, numCols);
  writeRange.setValues(calendarMatrix);

  // Aplicar las fusiones de celdas de una sola vez
  mergeRanges.forEach(mergeInfo => {
    const range = sheetCalendario.getRange(mergeInfo.row, mergeInfo.startCol, 1, mergeInfo.endCol - mergeInfo.startCol + 1);
    range.merge();
    range.setWrap(true);
  });

  // Mensaje final para confirmar que la actualización se completó
  SpreadsheetApp.getActiveSpreadsheet().toast('¡El Calendario de Colores se ha Actualizado! Todo está bien', 'Actualización de Calendario', 10);
}
